name: Release

on:
  push:
    branches: [main]

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    if: "!contains(github.event.head_commit.message, 'chore(release)')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: npm run build

      - name: Run tests
        run: npm run test

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet HEAD^ HEAD -- packages/; then
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate version bump
        if: steps.check-changes.outputs.changes == 'true'
        id: version
        run: |
          # Determine version bump type based on commit messages
          COMMITS=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"%s")

          if echo "$COMMITS" | grep -q "feat\|feature"; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -q "fix\|bug"; then
            echo "bump=patch" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -q "BREAKING CHANGE\|!:"; then
            echo "bump=major" >> $GITHUB_OUTPUT
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
          fi

      - name: Bump version
        if: steps.check-changes.outputs.changes == 'true'
        id: bump
        run: |
          npm version ${{ steps.version.outputs.bump }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "version=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update package versions
        if: steps.check-changes.outputs.changes == 'true'
        run: |
          NEW_VERSION=$(node -p "require('./package.json').version")

          # Update all package.json files
          for package in packages/*/package.json; do
            if [ -f "$package" ]; then
              node -e "
                const fs = require('fs');
                const pkg = JSON.parse(fs.readFileSync('$package'));
                pkg.version = '$NEW_VERSION';
                fs.writeFileSync('$package', JSON.stringify(pkg, null, 2) + '\n');
              "
            fi
          done

      - name: Generate changelog
        if: steps.check-changes.outputs.changes == 'true'
        id: changelog
        run: |
          echo "# Changelog" > TEMP_CHANGELOG.md
          echo "" >> TEMP_CHANGELOG.md
          echo "## [${{ steps.bump.outputs.version }}] - $(date +'%Y-%m-%d')" >> TEMP_CHANGELOG.md
          echo "" >> TEMP_CHANGELOG.md

          git log $(git describe --tags --abbrev=0)..HEAD \
            --pretty=format:"- %s (%h)" \
            --no-merges >> TEMP_CHANGELOG.md

      - name: Commit version bump
        if: steps.check-changes.outputs.changes == 'true'
        run: |
          git add package.json packages/*/package.json
          git commit -m "chore(release): bump version to ${{ steps.bump.outputs.version }}"
          git tag ${{ steps.bump.outputs.version }}

      - name: Push changes
        if: steps.check-changes.outputs.changes == 'true'
        run: |
          git push origin main
          git push origin ${{ steps.bump.outputs.version }}

      - name: Create GitHub Release
        if: steps.check-changes.outputs.changes == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump.outputs.version }}
          release_name: Release ${{ steps.bump.outputs.version }}
          body_path: TEMP_CHANGELOG.md
          draft: false
          prerelease: false
