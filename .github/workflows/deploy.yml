name: Deploy

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20.x'

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [backend, web]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Determine deployment environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        run: npm ci

      - name: Lint critical packages
        run: |
          npx eslint packages/web/src --ext .ts,.tsx
          npx eslint packages/mobile/src --ext .ts,.tsx
          npx eslint packages/shared/src --ext .ts,.tsx

      - name: Build all packages
        run: npm run build
        env:
          NODE_ENV: ${{ steps.env.outputs.environment == 'production' && 'production' || 'staging' }}
          VITE_NODE_ENV: ${{ steps.env.outputs.environment == 'production' && 'production' || 'staging' }}
          VITE_API_BASE_URL: ${{ steps.env.outputs.environment == 'production' && 'https://verding-backend-production.up.railway.app' || 'https://verding-backend-staging.up.railway.app' }}
          VITE_BUILD_TIME: ${{ github.run_id }}-${{ github.run_number }}
          VITE_APP_VERSION: ${{ github.ref_name }}

      - name: Run tests
        run: npm run test

      - name: Security scan
        run: npm audit --audit-level=high

      - name: Run Database Migrations
        if: matrix.service == 'backend'
        run: |
          echo "Running database migrations for ${{ steps.env.outputs.environment }}"
          # Add your migration commands here
          # npm run migrate:${{ steps.env.outputs.environment }}
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

      - name: Deploy Backend to Railway
        if: matrix.service == 'backend'
        uses: railwayapp/cli@v3
        with:
          command: up --service backend-${{ steps.env.outputs.environment }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Deploy Web to Railway
        if: matrix.service == 'web'
        uses: railwayapp/cli@v3
        with:
          command: up --service web-${{ steps.env.outputs.environment }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 45

      - name: Health Check
        run: |
          echo "Running health checks for ${{ steps.env.outputs.environment }}..."

          # Determine URLs based on environment
          if [[ "${{ steps.env.outputs.environment }}" == "production" ]]; then
            BACKEND_URL="${{ secrets.BACKEND_PRODUCTION_URL }}"
            WEB_URL="${{ secrets.WEB_PRODUCTION_URL }}"
          else
            BACKEND_URL="${{ secrets.BACKEND_STAGING_URL }}"
            WEB_URL="${{ secrets.WEB_STAGING_URL }}"
          fi

          # Health check for backend
          if [[ "${{ matrix.service }}" == "backend" ]]; then
            echo "Checking backend health at $BACKEND_URL"
            for i in {1..10}; do
              if curl -f "$BACKEND_URL/health"; then
                echo "Backend health check passed"
                break
              else
                echo "Backend health check failed, attempt $i/10"
                sleep 10
              fi
              if [[ $i == 10 ]]; then
                echo "Backend health check failed after 10 attempts"
                exit 1
              fi
            done
          fi

          # Health check for web
          if [[ "${{ matrix.service }}" == "web" ]]; then
            echo "Checking web health at $WEB_URL"
            for i in {1..10}; do
              if curl -f "$WEB_URL/health"; then
                echo "Web health check passed"
                break
              else
                echo "Web health check failed, attempt $i/10"
                sleep 10
              fi
              if [[ $i == 10 ]]; then
                echo "Web health check failed after 10 attempts"
                exit 1
              fi
            done
          fi

      - name: Notify Deployment Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'üöÄ ${{ matrix.service }} deployed to ${{ steps.env.outputs.environment }} successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Deployment Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '‚ùå ${{ matrix.service }} deployment to ${{ steps.env.outputs.environment }} failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
