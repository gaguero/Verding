---
description: Is useful everytime you work on o related to n8n
globs: 
alwaysApply: false
---
# n8n Workflow Development Rules

## Critical Findings from Working vs Non-Working Workflow Analysis

### **1. Node Connection Patterns**

#### ✅ **Sequential Flow (Working Pattern)**
```
Webhook → Get Properties → Prepare Context → OpenAI → [Log User, Log Agent] → Merge → Response
```

#### ❌ **Parallel Flow (Failed Pattern)**  
```
Webhook → [Get Properties, Prepare Context] (parallel)
```

**Key Learning**: n8n Function nodes cannot reliably access data from parallel nodes. The `$node["NodeName"]` syntax only works when nodes execute sequentially.

### **2. Supabase Node Configuration**

#### ✅ **Working Configuration**
```json
{
  "operation": "getAll",
  "tableId": "properties"
}
```

#### ❌ **Failed Configuration**
```json
{
  "resource": "row",
  "operation": "Get all rows"
}
```

**Key Learning**: Supabase nodes use simplified parameter structure with `operation` and `tableId` only.

### **3. OpenAI Node Type Selection**

#### ✅ **Working Node Type**
```json
{
  "type": "@n8n/n8n-nodes-langchain.openAi",
  "jsonOutput": true
}
```

#### ❌ **Failed Node Type**
```json
{
  "type": "n8n-nodes-base.openAi"
}
```

**Key Learning**: Use LangChain OpenAI node for structured JSON responses, not the base OpenAI node.

### **4. Response Synchronization**

#### ✅ **Working Pattern**
- Use Merge node to synchronize parallel logging operations
- Ensures webhook response waits for all operations to complete

#### ❌ **Failed Pattern**
- Direct response without waiting for logging completion
- Can cause race conditions and incomplete operations

## Error Handling Patterns

### **1. Error Workflow Setup**

#### **Create Error Handler Workflow**
```json
{
  "nodes": [
    {
      "parameters": {},
      "name": "Error Trigger",
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [720, -380]
    },
    {
      "parameters": {
        "channel": "channelname",
        "text": "=This workflow {{$node[\"Error Trigger\"].json[\"workflow\"][\"name\"]}} failed.\nHave a look at it here: {{$node[\"Error Trigger\"].json[\"execution\"][\"url\"]}}",
        "attachments": [],
        "otherOptions": {}
      },
      "name": "Slack",
      "type": "n8n-nodes-base.slack",
      "position": [900, -380],
      "typeVersion": 1
    }
  ],
  "connections": {
    "Error Trigger": {
      "main": [
        [
          {
            "node": "Slack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}
```

#### **Error Data Structure**
```json
[
  {
    "execution": {
      "id": "231",
      "url": "https://n8n.example.com/execution/231",
      "retryOf": "34",
      "error": {
        "message": "Example Error Message",
        "stack": "Stacktrace"
      },
      "lastNodeExecuted": "Node With Error",
      "mode": "manual"
    },
    "workflow": {
      "id": "1",
      "name": "Example Workflow"
    }
  }
]
```

### **2. Node-Level Error Handling**

#### **Enable Error Output on Nodes**
- Most nodes can have error output enabled
- Allows graceful handling of individual node failures
- Continue workflow execution despite errors

#### **Error Branch Pattern**
```
Main Node → [Success Path, Error Path]
           ↓              ↓
    Normal Flow    Error Logging → Continue
```

### **3. Error Handling Best Practices**

#### **✅ DO:**
- Use Error Trigger workflows for global error handling
- Enable error outputs on critical nodes
- Log errors to database/external systems
- Provide meaningful error messages
- Use Stop And Error node for custom error conditions
- Test error scenarios in production mode (not manual test)

#### **❌ DON'T:**
- Rely only on manual testing for error workflows
- Ignore error data structure differences
- Use error workflows for normal flow control
- Forget to handle both execution and trigger errors

### **4. Error Monitoring Setup**

#### **Slack Notification Template**
```javascript
// Error message template
"=This workflow {{$node[\"Error Trigger\"].json[\"workflow\"][\"name\"]}} failed.\nError: {{$node[\"Error Trigger\"].json[\"execution\"][\"error\"][\"message\"]}}\nLast Node: {{$node[\"Error Trigger\"].json[\"execution\"][\"lastNodeExecuted\"]}}\nExecution URL: {{$node[\"Error Trigger\"].json[\"execution\"][\"url\"]}}"
```

#### **Database Logging Pattern**
```json
{
  "operation": "insert",
  "tableId": "error_logs",
  "data": {
    "workflow_id": "={{$node[\"Error Trigger\"].json[\"workflow\"][\"id\"]}}",
    "workflow_name": "={{$node[\"Error Trigger\"].json[\"workflow\"][\"name\"]}}",
    "error_message": "={{$node[\"Error Trigger\"].json[\"execution\"][\"error\"][\"message\"]}}",
    "last_node": "={{$node[\"Error Trigger\"].json[\"execution\"][\"lastNodeExecuted\"]}}",
    "execution_id": "={{$node[\"Error Trigger\"].json[\"execution\"][\"id\"]}}",
    "timestamp": "={{new Date().toISOString()}}"
  }
}
```

## Data Access Patterns

### **1. Sequential Node References**

#### ✅ **Working Pattern**
```javascript
// In Function node - access previous sequential node
const properties = $node["Get Properties"].json;
const context = {
  user_message: $json.message,
  properties: properties,
  timestamp: new Date().toISOString()
};
```

#### ❌ **Failed Pattern**
```javascript
// Trying to access parallel node - unreliable
const properties = $node["Get Properties"].json; // May be undefined
```

### **2. Expression Syntax**

#### **Node Data Access**
```javascript
// Current node input
$json.fieldName

// Previous node output (sequential only)
$node["NodeName"].json.fieldName

// All items from previous node
$node["NodeName"].all()

// Check if node was executed
$node["NodeName"].isExecuted
```

#### **Error Checking Pattern**
```javascript
// Check if variable exists before using
{{$json["variable_name"] ? $json["variable_name"] : "not found"}}

// Nullish coalescing
{{$x ?? "default value"}}

// Logical OR for falsy values
{{$x || "default value"}}
```

## Performance Optimization

### **1. Rate Limiting Patterns**

#### **OpenAI Rate Limit Handling**
```json
{
  "nodes": [
    {
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "parameters": {
        "batchSize": 500,
        "options": {}
      }
    },
    {
      "name": "OpenAI",
      "type": "n8n-nodes-base.openAi"
    },
    {
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "parameters": {
        "unit": "minutes"
      }
    }
  ]
}
```

### **2. Memory Management**

#### **Large Data Handling**
- Use Split in Batches for large datasets
- Implement pagination for API calls
- Clear unnecessary data between nodes

## Webhook Patterns

### **1. Webhook Response Synchronization**

#### ✅ **Proper Response Pattern**
```
Webhook → Processing → [Logging Operations] → Merge → Respond to Webhook
```

#### **Response Data Structure**
```json
{
  "status": "success",
  "message": "Request processed successfully",
  "data": {
    "response": "AI generated response",
    "timestamp": "2024-01-01T00:00:00Z"
  }
}
```

### **2. Webhook Security**

#### **Authentication Patterns**
- Use API keys in headers
- Implement IP whitelisting
- Validate request signatures
- Use HTTPS only

## Testing Guidelines

### **1. Error Workflow Testing**

#### **Important Notes:**
- Error workflows only trigger in production mode
- Manual test executions don't trigger error workflows
- Test error scenarios by activating workflows and causing real failures

### **2. Data Validation**

#### **Input Validation Pattern**
```javascript
// Validate required fields
if (!$json.message || !$json.property_id) {
  throw new Error('Missing required fields: message and property_id');
}

// Type checking
if (typeof $json.message !== 'string') {
  throw new Error('Message must be a string');
}
```

## Common Pitfalls

### **1. Node Execution Order**
- ❌ Assuming parallel nodes execute in specific order
- ✅ Use sequential connections for dependent operations

### **2. Error Handling**
- ❌ Only testing error workflows manually
- ✅ Test in production mode with real failures

### **3. Data Access**
- ❌ Using `$node["Name"]` for parallel nodes
- ✅ Ensure sequential execution for reliable data access

### **4. Response Timing**
- ❌ Responding before all operations complete
- ✅ Use Merge node to synchronize operations

## Debugging Techniques

### **1. Console Logging**
```javascript
// JavaScript
console.log("Debug data:", $json);

// Python
print("Debug data:", $json)
```

### **2. Data Inspection**
```javascript
// Check data type
console.log("Type:", typeof $json.data);

// Check if node executed
console.log("Node executed:", $node["NodeName"].isExecuted);
```

### **3. Error Information**
```javascript
// In error workflow
console.log("Error details:", $node["Error Trigger"].json);
console.log("Failed workflow:", $node["Error Trigger"].json.workflow.name);
console.log("Error message:", $node["Error Trigger"].json.execution.error.message);
```

## Version Compatibility

### **Node Type Updates**
- Use `@n8n/n8n-nodes-langchain.openAi` for LangChain OpenAI
- Use `n8n-nodes-base.openAi` for basic OpenAI operations
- Check node type versions for compatibility

### **Parameter Structure Evolution**
- Supabase nodes use simplified structure
- Always check current documentation for parameter formats
- Test workflows after n8n updates

---

**Remember**: These patterns are based on real-world testing and official n8n documentation. Always test thoroughly in your specific environment and keep up with n8n updates that might change node behaviors.

